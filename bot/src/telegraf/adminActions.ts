// src/actions/admin.ts
import { Markup } from 'telegraf'
import { redis } from '../redis'
import { AdminActionHandlerMap, BroadcastSession, CallbackContext, PhotoContext, TextContext } from '../types/admin'
import { broadcastQueue } from '../broadcast'
import { processContactsFile } from '../helpers/fileProcessor'
import { bot } from '.'
import { restoreHtmlFromEntities } from '../helpers/restoreHtmlFromEntities'
import { isAdmin } from '../helpers/isAdmin'

const getSession = async (ctx: { from?: { id: number } }): Promise<BroadcastSession | null> => {
  if (!ctx.from) return null
  const sessionRaw = await redis.get(`admin:${ctx.from.id}:broadcast`)
  return sessionRaw ? JSON.parse(sessionRaw) : null
}

const updateSession = async (ctx: { from?: { id: number } }, session: BroadcastSession): Promise<void> => {
  if (!ctx.from) return
  await redis.set(`admin:${ctx.from.id}:broadcast`, JSON.stringify(session))
}

const showMainMenu = async (
  ctx: TextContext | CallbackContext | PhotoContext,
  session: BroadcastSession
): Promise<void> => {
  const message = [
    `üìä <b>–†–∞—Å—Å—ã–ª–∫–∞</b>`,
    `üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${session.contacts.length}`,
    `üìù –¢–µ–∫—Å—Ç: ${session.text ? '‚úÖ' : '‚ùå'}`,
    `üñº –§–æ—Ç–æ: ${session.photoFileId ? '‚úÖ' : '‚ùå'}`,
    ``,
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
  ].join('\n')

  const photoButtonText = session.photoFileId ? 'üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', 'broadcast:edit_text'),
      Markup.button.callback(photoButtonText, 'broadcast:edit_photo'),
    ],
    [
      Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'broadcast:start'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'broadcast:cancel'),
    ],
  ])

  if (session.photoFileId) {
    await ctx.replyWithPhoto(session.photoFileId)
  }

  await ctx.replyWithHTML(message, keyboard)
}

const startBroadcasting = async (ctx: TextContext | CallbackContext, session: BroadcastSession): Promise<void> => {
  if (!session.text) {
    await ctx.reply('–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    return
  }

  await broadcastQueue.add('send', {
    adminId: ctx.from.id,
    contacts: session.contacts,
    text: session.text,
    photoFileId: session.photoFileId,
  })

  await redis.del(`admin:${ctx.from.id}:broadcast`)
  await ctx.reply(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.`)
}

const adminActions: AdminActionHandlerMap = {
  commands: {
    broadcast: async (ctx) => {
      if (!isAdmin(ctx.from?.id)) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
        return
      }

      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (–∫–∞–∂–¥—ã–π ID –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)')

      await redis.set(
        `admin:${ctx.from?.id}:broadcast`,
        JSON.stringify({
          step: 'AWAIT_FILE',
          contacts: [],
        } as BroadcastSession)
      )
    },
  },

  messages: {
    text: async (ctx) => {
      const session = await getSession(ctx)
      if (!session || session.step !== 'AWAIT_TEXT') return

      session.text = restoreHtmlFromEntities(ctx.message.text, ctx.message.entities ?? [])
      session.step = 'MAIN_MENU'
      await updateSession(ctx, session)

      await showMainMenu(ctx, session)
    },
    document: async (ctx) => {
      const session = await getSession(ctx)
      if (!session || session.step !== 'AWAIT_FILE') return

      if (!('document' in ctx.message)) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏')
        return
      }

      const doc = ctx.message.document

      if (!doc.file_name?.endsWith('.txt')) {
        await ctx.reply('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt')
        return
      }

      if (doc.mime_type !== 'text/plain') {
        await ctx.reply('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª')
        return
      }

      const MAX_FILE_SIZE = 1024 * 1024 // 1MB
      if (doc.file_size && doc.file_size > MAX_FILE_SIZE) {
        await ctx.reply(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(doc.file_size / 1024).toFixed(2)}KB). –ú–∞–∫—Å–∏–º—É–º 1MB`)
        return
      }

      let contacts = await processContactsFile(bot, doc.file_id)

      if (contacts.length === 0) {
        await ctx.reply('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π ID –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ')
        return
      }

      const MAX_CONTACTS = 10000
      if (contacts.length > MAX_CONTACTS) {
        await ctx.reply(`‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (${contacts.length}). –ú–∞–∫—Å–∏–º—É–º ${MAX_CONTACTS}`)
        return
      }

      const uniqueContacts = [...new Set(contacts)]
      if (uniqueContacts.length !== contacts.length) {
        await ctx.reply(`‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ ${contacts.length - uniqueContacts.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`)
        contacts = uniqueContacts
      }

      session.contacts = contacts
      session.step = 'AWAIT_TEXT'
      await updateSession(ctx, session)

      await ctx.reply(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:`)
    },
    photo: async (ctx) => {
      const session = await getSession(ctx)
      if (!session || session.step !== 'AWAIT_PHOTO') return

      session.photoFileId = ctx.message.photo[ctx.message.photo.length - 1].file_id
      session.step = 'MAIN_MENU'
      await updateSession(ctx, session)

      await showMainMenu(ctx, session)
    },
  },

  callbacks: {
    'broadcast:edit_text': async (ctx) => {
      const session = await getSession(ctx)
      if (!session || session.step !== 'MAIN_MENU') return

      session.step = 'AWAIT_TEXT'
      await updateSession(ctx, session)
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
      await ctx.answerCbQuery()
    },

    'broadcast:edit_photo': async (ctx) => {
      const session = await getSession(ctx)
      if (!session || session.step !== 'MAIN_MENU') return

      session.step = 'AWAIT_PHOTO'
      await updateSession(ctx, session)
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
      await ctx.answerCbQuery()
    },

    'broadcast:start': async (ctx) => {
      const session = await getSession(ctx)
      if (!session || session.step !== 'MAIN_MENU') return

      await startBroadcasting(ctx, session)
      await ctx.answerCbQuery()
    },

    'broadcast:cancel': async (ctx) => {
      await redis.del(`admin:${ctx.from.id}:broadcast`)
      await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
      await ctx.answerCbQuery()
    },
  },
}

export { adminActions }
